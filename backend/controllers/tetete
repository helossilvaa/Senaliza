import { 
    criarChamado, listarChamado, obterChamadoPorId, atualizarChamado, 
    criarApontamentos, assumirChamado, atualizarStatusChamado, 
    listarChamadosPendentes, atualizarPrazoChamado, listarChamadosPorCategoria, 
    listarRankingTecnicos, atribuirChamado, listarTodosChamadosPendentes, listarApontamentos 
} from "../models/chamado.js";

import { listarPoolsTecnico } from "../models/poolTecnico.js";
import { criarNotificacao } from "../models/notificacoes.js";
import { criarRelatorio } from "../models/relatorio.js";
import notificacaoTextos from '../utils/notificacoesTextos.js';
import { obterStatusUsuario } from '../models/usuario.js';

// ------------------ CRIAR CHAMADO ------------------
const criarChamadoController = async (req, res) => {
    try {
        const { titulo, descricao, tipo_id, sala_id, equipamento_id } = req.body;
        const equipamentoIdNumerico = parseInt(equipamento_id, 10);

        const chamadosExistentes = await listarChamado();
        const jaExiste = chamadosExistentes.some(c =>
            c.equipamento_id === equipamentoIdNumerico && c.status !== 'concluído'
        );
        if (jaExiste) return res.status(400).json({ mensagem: 'Já existe um chamado ativo para este equipamento.' });

        const chamadoId = await criarChamado({
            titulo, descricao, tipo_id, usuario_id: req.usuarioId, tecnico_id: null,
            sala_id, equipamento_id: equipamentoIdNumerico, status: 'pendente'
        });

        // Notificação para técnicos do pool
        const poolsDoTecnico = await listarPoolsTecnico(req.usuarioId);
        for (const tecnico_id of poolsDoTecnico) {
            await criarNotificacao({
                usuario_id: null,
                tecnico_id,
                mensagem: notificacaoTextos.NOVO_CHAMADO(chamadoId),
                visualizado: 0
            });
        }

        res.status(201).json({ mensagem: 'Chamado criado com sucesso', chamadoId });
    } catch (error) {
        console.error('Erro ao criar chamado:', error);
        res.status(500).json({ mensagem: 'Erro ao criar chamado.' });
    }
};

// ------------------ LISTAR CHAMADOS ------------------
const listarChamadosController = async (req, res) => {
    try {
        const chamados = await listarChamado();
        res.status(200).json(chamados);
    } catch (error) {
        console.error('Erro ao listar chamados: ', error);
        res.status(500).json({ mensagem: "Erro ao listar chamados." });
    }
};

const listarChamadosDoUsuarioController = async (req, res) => {
    try {
        const todosChamados = await listarChamado();
        const chamadosDoUsuario = todosChamados.filter(c => c.usuario_id === req.usuarioId);
        res.json(chamadosDoUsuario);
    } catch (error) {
        console.error('Erro ao listar chamados do usuário: ', error);
        res.status(500).json({ mensagem: "Erro ao listar chamados." });
    }
};

const listarTodosChamadosDoTecnicoController = async (req, res) => {
    try {
        const todosChamados = await listarChamado();
        const chamadosDoTecnico = todosChamados.filter(c => c.tecnico_id === req.usuarioId);
        res.status(200).json(chamadosDoTecnico);
    } catch (error) {
        res.status(500).json({ mensagem: 'Erro ao listar chamados do técnico' });
    }
};

const listarChamadosPendentesController = async (req, res) => {
    try {
        if (req.usuarioFuncao === 'admin') {
            const chamadosPendentes = await listarTodosChamadosPendentes();
            return res.status(200).json(chamadosPendentes);
        }
        const poolsIds = await listarPoolsTecnico(req.usuarioId);
        if (poolsIds.length === 0) return res.status(200).json([]);
        const chamadosPendentes = await listarChamadosPendentes(poolsIds);
        res.status(200).json(chamadosPendentes);
    } catch (error) {
        console.error('Erro ao listar chamados pendentes:', error);
        res.status(500).json({ mensagem: 'Erro ao listar chamados pendentes.' });
    }
};

const listarHistoricoChamadosController = async (req, res) => {
    try {
        const todosChamados = await listarChamado();
        const historico = todosChamados.filter(chamado => chamado.status.toLowerCase().trim() === 'concluído' || chamado.status.toLowerCase().trim() === 'concluido');
        res.status(200).json(historico);
    } catch (error) {
        console.error('Erro ao listar histórico de chamados:', error);
        res.status(500).json({ mensagem: 'Erro ao obter histórico.' });
    }
};

const listarChamadosConcluidosDoTecnicoController = async (req, res) => {
    try {
        const todosChamados = await listarChamado();
        const concluido = todosChamados.filter(c =>
            c.tecnico_id === req.usuarioId &&
            ['concluído','concluido'].includes(c.status.toLowerCase().trim())
        );
        res.status(200).json(concluido);
    } catch (error) {
        console.error('Erro ao listar chamados concluídos do técnico:', error);
        res.status(500).json({ mensagem: 'Erro ao listar chamados concluídos do técnico' });
    }
};

const listarChamadosPorCategoriaController = async (req, res) => {
    try {
        const dados = await listarChamadosPorCategoria();
        if (!dados || !Array.isArray(dados)) return res.status(500).json({ mensagem: 'Dados de categoria inválidos.' });
        res.status(200).json(dados);
    } catch (error) {
        console.error('Erro ao listar chamados por categoria:', error);
        res.status(500).json({ mensagem: 'Erro ao listar chamados por categoria.' });
    }
};

const listarRankingTecnicosController = async (req, res) => {
    try {
        const ranking = await listarRankingTecnicos();
        res.status(200).json(ranking);
    } catch (error) {
        console.error('Erro ao buscar ranking técnicos:', error);
        res.status(500).json({ mensagem: 'Erro ao buscar o ranking de técnicos.' });
    }
};

// ------------------ OBTER, ATUALIZAR CHAMADO ------------------
const obterChamadoPorIdController = async (req, res) => {
    try {
        const chamado = await obterChamadoPorId(req.params.id);
        if (!chamado) return res.status(404).json({ mensagem: 'Chamado não encontrado' });
        res.status(200).json(chamado);
    } catch (error) {
        console.error("Erro ao obter chamado por ID: ", error);
        res.status(500).json({ mensagem: 'Erro ao obter chamado por ID' });
    }
};

const atualizarChamadoController = async (req, res) => {
    try {
        const { chamado_id, descricao } = req.body;
        const chamadoExistente = await obterChamadoPorId(chamado_id);
        if (!chamadoExistente) return res.status(404).json({ mensagem: 'Chamado não encontrado' });

        const descricaoAtualizada = `${chamadoExistente.descricao}\n\n${descricao}`;
        await atualizarChamado({ chamado_id, descricao: descricaoAtualizada });

        res.status(200).json({ mensagem: 'Chamado atualizado com sucesso' });
    } catch (error) {
        console.error('Erro ao atualizar chamado: ', error);
        res.status(500).json({ mensagem: 'Erro ao atualizar chamado.' });
    }
};

// ------------------ APONTAMENTOS ------------------
const criarApontamentoController = async (req, res) => {
    try {
        const { apontamento } = req.body;
        const userId = req.usuarioId;
        const chamadoId = req.params.id;
        const chamadoExistente = await obterChamadoPorId(chamadoId);
        if (!chamadoExistente) return res.status(404).json({ mensagem: 'Chamado não encontrado' });

        const tipoApontamento = (userId === chamadoExistente.usuario_id) ? 'usuario' : 'tecnico';
        if (tipoApontamento === 'tecnico' && chamadoExistente.tecnico_id !== userId)
            return res.status(403).json({ mensagem: 'Você não tem permissão para adicionar apontamentos a este chamado.' });

        const apontamentoData = { usuario_id: userId, apontamento, tipo: tipoApontamento };
        const apontamentoId = await criarApontamentos(chamadoId, apontamentoData);

        // Notificações
        if (tipoApontamento === 'usuario' && chamadoExistente.tecnico_id) {
            await criarNotificacao({ usuario_id: null, tecnico_id: chamadoExistente.tecnico_id, mensagem: notificacaoTextos.NOVO_APONTAMENTO_USUARIO(chamadoId), visualizado: 0 });
        } else if (tipoApontamento === 'tecnico') {
            await criarNotificacao({ usuario_id: chamadoExistente.usuario_id, tecnico_id: null, mensagem: notificacaoTextos.NOVO_APONTAMENTO_TECNICO(chamadoId), visualizado: 0 });
        }

        res.status(201).json({ mensagem: 'Apontamento criado com sucesso', apontamentoData: apontamentoId });
    } catch (error) {
        console.error('Erro ao criar apontamento: ', error);
        res.status(500).json({ mensagem: 'Erro ao criar apontamento.' });
    }
};

const listarApontamentosController = async (req, res) => {
    try {
        const { id } = req.params;
        const apontamentos = await listarApontamentos(id);
        res.status(200).json(apontamentos);
    } catch (error) {
        console.error('Erro ao listar apontamentos: ', error);
        res.status(500).json({ mensagem: 'Erro ao listar apontamentos.' });
    }
};

// ------------------ ATRIBUIR / ASSUMIR / PRAZO / STATUS ------------------
const atribuirChamadoController = async (req, res) => {
    try {
        const { id } = req.params;
        const { tecnicoId } = req.body;
        const chamadoExistente = await obterChamadoPorId(id);
        if (!chamadoExistente) return res.status(404).json({ mensagem: 'Chamado não encontrado.' });
        if (chamadoExistente.tecnico_id) return res.status(400).json({ mensagem: 'Chamado já atribuído.' });

        await atribuirChamado(id, tecnicoId);
        await criarNotificacao({ usuario_id: null, tecnico_id: tecnicoId, mensagem: `Você foi atribuído ao chamado #${id}.`, visualizado: 0 });

        res.status(200).json({ mensagem: 'Chamado atribuído com sucesso!' });
    } catch (error) {
        console.error('Erro ao atribuir chamado:', error);
        res.status(500).json({ mensagem: 'Erro interno do servidor.' });
    }
};

const assumirChamadoController = async (req, res) => {
    try {
        const { id } = req.params;
        const tecnico_id = req.usuarioId;
        const chamadoExistente = await obterChamadoPorId(id);
        if (!chamadoExistente) return res.status(404).json({ mensagem: 'Chamado não encontrado.' });

        await assumirChamado(id, tecnico_id);
        await criarNotificacao({ usuario_id: chamadoExistente.usuario_id, tecnico_id: tecnico_id, mensagem: notificacaoTextos.CHAMADO_EM_ANDAMENTO(id, req.usuarioNome), visualizado: 0 });

        res.status(200).json({ mensagem: 'Chamado assumido com sucesso' });
    } catch (error) {
        console.error('Erro ao assumir chamado:', error);
        res.status(400).json({ mensagem: error.message });
    }
};

const estipularPrazoController = async (req, res) => {
    try {
        const { id } = req.params;
        const { prazo } = req.body;
        const chamado = await obterChamadoPorId(id);
        if (!chamado) return res.status(404).json({ mensagem: 'Chamado não encontrado.' });

        await atualizarPrazoChamado(id, prazo);
        await criarNotificacao({ usuario_id: chamado.usuario_id, tecnico_id: null, mensagem: notificacaoTextos.PRAZO_ESTIPULADO(id, prazo), visualizado: 0 });

        res.status(200).json({ mensagem: 'Prazo estipulado com sucesso.' });
    } catch (error) {
        console.error('Erro ao estipular prazo:', error);
        res.status(500).json({ mensagem: 'Erro interno do servidor.' });
    }
};

const atualizarStatusChamadoController = async (req, res) => {
    try {
        const { id } = req.params;
        const { status, solucao } = req.body;
        const tecnicoId = req.usuarioId;
        const chamadoExistente = await obterChamadoPorId(id);
        if (!chamadoExistente) return res.status(404).json({ mensagem: 'Chamado não encontrado.' });

        await atualizarStatusChamado(id, status);

        if (['concluído','concluido'].includes(status.toLowerCase().trim())) {
            await criarRelatorio({
                chamado_id: chamadoExistente.id,
                tecnico_id: tecnicoId,
                solucao: solucao || null,
                comeco: new Date(chamadoExistente.criado_em),
                fim: new Date()
            });
            await criarNotificacao({ usuario_id: chamadoExistente.usuario_id, tecnico_id: null, mensagem: notificacaoTextos.CHAMADO_CONCLUIDO(id), visualizado: 0 });
        }

        res.status(200).json({ mensagem: `Status do chamado ${id} atualizado para ${status}.` });
    } catch (error) {
        console.error('Erro ao atualizar status do chamado:', error);
        res.status(500).json({ mensagem: 'Erro interno ao atualizar status.' });
    }
};

export {
    criarChamadoController,
    listarChamadosController,
    listarChamadosDoUsuarioController,
    listarTodosChamadosDoTecnicoController,
    listarChamadosPendentesController,
    listarHistoricoChamadosController,
    listarChamadosConcluidosDoTecnicoController,
    listarChamadosPorCategoriaController,
    listarRankingTecnicosController,
    obterChamadoPorIdController,
    atualizarChamadoController,
    criarApontamentoController,
    listarApontamentosController,
    atribuirChamadoController,
    assumirChamadoController,
    estipularPrazoController,
    atualizarStatusChamadoController
};
